// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file secondary.proto (package verified.secondary.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message verified.secondary.v1.Pools
 */
export class Pools extends Message<Pools> {
  /**
   * @generated from field: repeated verified.secondary.v1.Pool pools = 1;
   */
  pools: Pool[] = [];

  constructor(data?: PartialMessage<Pools>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "verified.secondary.v1.Pools";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Pool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pools {
    return new Pools().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pools {
    return new Pools().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pools {
    return new Pools().fromJsonString(jsonString, options);
  }

  static equals(a: Pools | PlainMessage<Pools> | undefined, b: Pools | PlainMessage<Pools> | undefined): boolean {
    return proto3.util.equals(Pools, a, b);
  }
}

/**
 * @generated from message verified.secondary.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: bytes pool_address = 1;
   */
  poolAddress = new Uint8Array(0);

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "verified.secondary.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

/**
 * @generated from message verified.secondary.v1.Trades
 */
export class Trades extends Message<Trades> {
  /**
   * @generated from field: repeated verified.secondary.v1.Trade trades = 1;
   */
  trades: Trade[] = [];

  constructor(data?: PartialMessage<Trades>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "verified.secondary.v1.Trades";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trades", kind: "message", T: Trade, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trades {
    return new Trades().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trades {
    return new Trades().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trades {
    return new Trades().fromJsonString(jsonString, options);
  }

  static equals(a: Trades | PlainMessage<Trades> | undefined, b: Trades | PlainMessage<Trades> | undefined): boolean {
    return proto3.util.equals(Trades, a, b);
  }
}

/**
 * @generated from message verified.secondary.v1.Trade
 */
export class Trade extends Message<Trade> {
  /**
   * @generated from field: bytes security_address = 1;
   */
  securityAddress = new Uint8Array(0);

  /**
   * @generated from field: bytes orderRef = 2;
   */
  orderRef = new Uint8Array(0);

  /**
   * @generated from field: bytes party = 3;
   */
  party = new Uint8Array(0);

  /**
   * @generated from field: bytes counterParty = 4;
   */
  counterParty = new Uint8Array(0);

  /**
   * @generated from field: bytes order_type = 5;
   */
  orderType = new Uint8Array(0);

  /**
   * @generated from field: uint64 price = 6;
   */
  price = protoInt64.zero;

  /**
   * @generated from field: bytes currency_address = 7;
   */
  currencyAddress = new Uint8Array(0);

  /**
   * @generated from field: uint64 traded_amount = 8;
   */
  tradedAmount = protoInt64.zero;

  /**
   * @generated from field: uint64 execution_date = 9;
   */
  executionDate = protoInt64.zero;

  constructor(data?: PartialMessage<Trade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "verified.secondary.v1.Trade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "security_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "order_ref", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "party", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "counterparty", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "order_type", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "currency_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "traded_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "execution_date", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trade {
    return new Trade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trade {
    return new Trade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trade {
    return new Trade().fromJsonString(jsonString, options);
  }

  static equals(a: Trade | PlainMessage<Trade> | undefined, b: Trade | PlainMessage<Trade> | undefined): boolean {
    return proto3.util.equals(Trade, a, b);
  }
}

